{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Downloads\\\\Workspace\\\\Project\\\\Authentication\\\\client\\\\src\\\\Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport jwt from 'jsonwebtoken';\nimport { useHistory } from 'react-router';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Dashboard() {\n  _s();\n\n  const history = useHistory();\n  const [quote, setQuote] = useState('');\n  const [tempQuote, setTempQuote] = useState('');\n\n  async function populateQuote() {\n    const req = await fetch('http://localhost:5000/api/quote', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-access-token': localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        quote: tempQuote\n      })\n    });\n    const data = req.json();\n\n    if (data.status === 'ok') {\n      setTempQuote('');\n      setQuote(data.quote);\n    } else {\n      alert(data.error);\n    }\n  }\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n\n    if (token) {\n      const user = jwt.decode(token);\n\n      if (!user) {\n        localStorage.removeItem('token');\n        history.replace('/login');\n      } else {\n        populateQuote();\n      }\n    }\n  }, []);\n\n  async function updateQuote() {\n    const req = await fetch('http://localhost:5000/api/quote', {\n      headers: {\n        'x-access-token': localStorage.getItem('token')\n      }\n    });\n    const data = req.json();\n\n    if (data.status === 'ok') {\n      setQuote(data.quote);\n    } else {\n      alert(data.error);\n    }\n  }\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n\n    if (token) {\n      const user = jwt.decode(token);\n\n      if (!user) {\n        localStorage.removeItem('token');\n        history.replace('/login');\n      } else {\n        populateQuote();\n      }\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Your quote:\", quote || 'No quote found']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: updateQuote,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Quote\",\n        value: tempQuote,\n        onChange: e => setTempQuote(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Update quote\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Dashboard, \"yY5UdxHh/oTYIRl8ttx3yPcqKOc=\", false, function () {\n  return [useHistory];\n});\n\n_c = Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["C:/Users/Admin/Downloads/Workspace/Project/Authentication/client/src/Dashboard.js"],"names":["React","useEffect","useState","jwt","useHistory","Dashboard","history","quote","setQuote","tempQuote","setTempQuote","populateQuote","req","fetch","method","headers","localStorage","getItem","body","JSON","stringify","data","json","status","alert","error","token","user","decode","removeItem","replace","updateQuote","e","target","value"],"mappings":"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","sourcesContent":["import React,{useEffect,useState} from 'react'\r\nimport jwt from 'jsonwebtoken'\r\nimport { useHistory } from 'react-router'\r\n\r\nexport default function Dashboard() {\r\n    const history = useHistory()\r\n    const [quote, setQuote] = useState('')\r\n    const [tempQuote, setTempQuote] = useState('')\r\n\r\n    async function populateQuote(){\r\n        const req = await fetch('http://localhost:5000/api/quote',{\r\n            method:'POST',\r\n            headers:{\r\n                'Content-Type':'application/json',\r\n                'x-access-token': localStorage.getItem('token')\r\n            },\r\n            body: JSON.stringify({\r\n                quote:tempQuote,\r\n            })\r\n        })\r\n        const data = req.json()\r\n        if(data.status === 'ok'){\r\n            setTempQuote('')\r\n            setQuote(data.quote)\r\n        }\r\n        else{\r\n            alert(data.error)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        const token = localStorage.getItem('token')\r\n        if(token){\r\n            const user = jwt.decode(token)\r\n            if(!user){\r\n                localStorage.removeItem('token')\r\n                history.replace('/login')\r\n            }\r\n            else{\r\n                populateQuote()\r\n            }\r\n        }\r\n    }, [])\r\n    async function updateQuote(){\r\n        const req = await fetch('http://localhost:5000/api/quote',{\r\n            headers:{\r\n                'x-access-token': localStorage.getItem('token')\r\n            }\r\n        })\r\n        const data = req.json()\r\n        if(data.status === 'ok'){\r\n            setQuote(data.quote)\r\n        }\r\n        else{\r\n            alert(data.error)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        const token = localStorage.getItem('token')\r\n        if(token){\r\n            const user = jwt.decode(token)\r\n            if(!user){\r\n                localStorage.removeItem('token')\r\n                history.replace('/login')\r\n            }\r\n            else{\r\n                populateQuote()\r\n            }\r\n        }\r\n        \r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <h1>Your quote:{quote || 'No quote found'}</h1>\r\n            <form onSubmit={updateQuote}>\r\n                <input type=\"text\" placeholder=\"Quote\" value={tempQuote} onChange={e=>setTempQuote(e.target.value)}/>\r\n                <input type=\"submit\" value=\"Update quote\"/>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}